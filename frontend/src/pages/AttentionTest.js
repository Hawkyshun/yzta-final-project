import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import Toast from "../components/Toast";
import ThemeSwitch from "../components/ThemeSwitch";

export default function AttentionTest() {
  const navigate = useNavigate();
  const [currentPhase, setCurrentPhase] = useState('instructions');
  const [currentQuestion, setCurrentQuestion] = useState(0);
  const [score, setScore] = useState(0);
  const [timeLeft, setTimeLeft] = useState(480); // 8 dakika
  const [userAnswers, setUserAnswers] = useState({});
  const [testCompleted, setTestCompleted] = useState(false);
  const [toast, setToast] = useState(null);

  const questions = [
    {
      id: 1,
      type: "stroop",
      question: "AÅŸaÄŸÄ±daki kelimelerin RENKLERÄ°NÄ° sÃ¶yleyin (kelimenin anlamÄ±na deÄŸil, yazÄ±ldÄ±ÄŸÄ± renge bakÄ±n):",
      items: [
        { text: "KIRMIZI", color: "blue" },
        { text: "MAVÄ°", color: "red" },
        { text: "YEÅžÄ°L", color: "yellow" },
        { text: "SARI", color: "green" }
      ],
      correct: ["mavi", "kÄ±rmÄ±zÄ±", "sarÄ±", "yeÅŸil"]
    },
    {
      id: 2,
      type: "sequence",
      question: "AÅŸaÄŸÄ±daki sayÄ± dizisini hatÄ±rlayÄ±n ve ters sÄ±rayla yazÄ±n:",
      sequence: "7-3-9-1-5-8-2-6",
      correct: "6-2-8-5-1-9-3-7"
    },
    {
      id: 3,
      type: "pattern",
      question: "AÅŸaÄŸÄ±daki desende kaÃ§ tane Ã¼Ã§gen var?",
      pattern: "ðŸ”ºðŸ”»ðŸ”ºðŸ”ºðŸ”»ðŸ”ºðŸ”»ðŸ”ºðŸ”ºðŸ”»",
      correct: 6
    },
    {
      id: 4,
      type: "counting",
      question: "AÅŸaÄŸÄ±daki metinde kaÃ§ tane 'A' harfi var?",
      text: "ANKARA BAÅžKENTTÄ°R VE TÃœRKÄ°YE'NÄ°N MERKEZÄ°NDE BULUNUR",
      correct: 8
    },
    {
      id: 5,
      type: "visual",
      question: "AÅŸaÄŸÄ±daki ÅŸekillerden hangisi diÄŸerlerinden farklÄ±dÄ±r?",
      shapes: ["ðŸ”´", "ðŸ”µ", "ðŸ”´", "ðŸ”´", "ðŸ”µ"],
      correct: 1 // Ä°kinci ÅŸekil (mavi)
    },
    {
      id: 6,
      type: "math",
      question: "AÅŸaÄŸÄ±daki iÅŸlemleri sÄ±rayla yapÄ±n ve sonucu yazÄ±n:",
      operations: "15 + 7 - 3 Ã— 2 + 10",
      correct: 26
    },
    {
      id: 7,
      type: "memory",
      question: "AÅŸaÄŸÄ±daki kelimeleri 10 saniye ezberleyin, sonra hatÄ±rlayÄ±n:",
      words: ["KALEM", "MASA", "KÄ°TAP", "PENCERE", "Ã‡ANTA"],
      correct: ["KALEM", "MASA", "KÄ°TAP", "PENCERE", "Ã‡ANTA"]
    },
    {
      id: 8,
      type: "focus",
      question: "AÅŸaÄŸÄ±daki cÃ¼mlede kaÃ§ tane 'E' harfi var?",
      sentence: "ELEKTRONÄ°K CÄ°HAZLAR GÃœNLÃœK HAYATIMIZIN VAZGEÃ‡Ä°LMEZ PARÃ‡ASIDIR",
      correct: 12
    },
    {
      id: 9,
      type: "speed",
      question: "AÅŸaÄŸÄ±daki sayÄ±larÄ± hÄ±zlÄ±ca toplayÄ±n:",
      numbers: [12, 8, 15, 23, 7, 19, 4, 31],
      correct: 119
    },
    {
      id: 10,
      type: "logic",
      question: "AÅŸaÄŸÄ±daki dizide eksik olan sayÄ± nedir?",
      sequence: "2, 4, 8, 16, ?, 64",
      correct: 32
    },
    {
      id: 11,
      type: "detail",
      question: "AÅŸaÄŸÄ±daki resimde kaÃ§ tane daire var?",
      image: "ðŸ”´ðŸ”µðŸ”´ðŸ”µðŸ”´ðŸ”µðŸ”´ðŸ”µðŸ”´ðŸ”µðŸ”´ðŸ”µ",
      correct: 12
    },
    {
      id: 12,
      type: "concentration",
      question: "AÅŸaÄŸÄ±daki kelimelerden hangisi 'MUTLU' kelimesinin zÄ±t anlamlÄ±sÄ±dÄ±r?",
      options: ["SevinÃ§li", "ÃœzgÃ¼n", "NeÅŸeli", "Keyifli"],
      correct: 1
    }
  ];

  useEffect(() => {
    if (currentPhase === 'test' && timeLeft > 0) {
      const timer = setTimeout(() => {
        setTimeLeft(timeLeft - 1);
      }, 1000);
      return () => clearTimeout(timer);
    } else if (timeLeft === 0 && currentPhase === 'test') {
      finishTest();
    }
  }, [timeLeft, currentPhase]);

  const startTest = () => {
    setCurrentPhase('test');
  };

  const handleAnswer = (answer) => {
    setUserAnswers(prev => ({
      ...prev,
      [currentQuestion]: answer
    }));
    
    // Otomatik ilerleme - 1.5 saniye sonra
    setTimeout(() => {
      if (currentQuestion < questions.length - 1) {
        setCurrentQuestion(currentQuestion + 1);
      } else {
        finishTest();
      }
    }, 1500);
  };

  const nextQuestion = () => {
    if (currentQuestion < questions.length - 1) {
      setCurrentQuestion(currentQuestion + 1);
    } else {
      finishTest();
    }
  };

  const finishTest = () => {
    let totalScore = 0;
    questions.forEach((question, index) => {
      const userAnswer = userAnswers[index];
      if (userAnswer !== undefined) {
        if (Array.isArray(question.correct)) {
          // Array karÅŸÄ±laÅŸtÄ±rmasÄ±
          if (Array.isArray(userAnswer) && userAnswer.length === question.correct.length) {
            const isCorrect = userAnswer.every((ans, i) => 
              ans.toString().toLowerCase() === question.correct[i].toString().toLowerCase()
            );
            if (isCorrect) totalScore += 1;
          }
        } else {
          // Basit karÅŸÄ±laÅŸtÄ±rma
          if (userAnswer.toString().toLowerCase() === question.correct.toString().toLowerCase()) {
            totalScore += 1;
          }
        }
      }
    });
    
    setScore(totalScore);
    setTestCompleted(true);
    setCurrentPhase('results');
    
    // 5 saniye sonra ana sayfaya yÃ¶nlendir
    setTimeout(() => {
      navigate("/test-list");
    }, 5000);
  };

  const handleLogout = () => {
    setToast({
      message: "Ã‡Ä±kÄ±ÅŸ yapÄ±ldÄ±. Ana sayfaya yÃ¶nlendiriliyorsunuz.",
      type: "info"
    });
    setTimeout(() => navigate("/"), 1500);
  };

  const formatTime = (seconds) => {
    const mins = Math.floor(seconds / 60);
    const secs = seconds % 60;
    return `${mins}:${secs.toString().padStart(2, '0')}`;
  };

  const getScorePercentage = () => {
    return Math.round((score / questions.length) * 100);
  };

  const getScoreLevel = () => {
    const percentage = getScorePercentage();
    if (percentage >= 90) return 'MÃ¼kemmel';
    if (percentage >= 80) return 'Ã‡ok Ä°yi';
    if (percentage >= 70) return 'Ä°yi';
    if (percentage >= 60) return 'Orta';
    if (percentage >= 50) return 'ZayÄ±f';
    return 'Ã‡ok ZayÄ±f';
  };

  const renderInstructions = () => (
    <div className="test-instructions">
      <h2>Dikkat ve Konsantrasyon Testi</h2>
      <p>Bu test dikkat sÃ¼renizi ve konsantrasyon becerinizi Ã¶lÃ§er.</p>
      
      <div className="instruction-steps">
        <h3>Test Ä°Ã§eriÄŸi:</h3>
        <ul>
          <li>Stroop Testi (renk-kelime uyumsuzluÄŸu)</li>
          <li>SayÄ± dizisi hatÄ±rlama</li>
          <li>GÃ¶rsel dikkat testleri</li>
          <li>HÄ±zlÄ± hesaplama</li>
          <li>MantÄ±k sorularÄ±</li>
        </ul>
      </div>

      <div className="test-info">
        <p><strong>SÃ¼re:</strong> 8 dakika</p>
        <p><strong>Soru SayÄ±sÄ±:</strong> 12 soru</p>
        <p><strong>Test TÃ¼rÃ¼:</strong> Dikkat ve Konsantrasyon</p>
      </div>

      <button className="start-btn" onClick={startTest}>
        Testi BaÅŸlat
      </button>
    </div>
  );

  const renderQuestion = () => {
    const currentQ = questions[currentQuestion];
    
    return (
      <div className="question-container">
        <div className="test-header">
          <div className="timer">
            <span>Kalan SÃ¼re: {formatTime(timeLeft)}</span>
          </div>
          <div className="progress">
            <span>Soru {currentQuestion + 1} / {questions.length}</span>
          </div>
        </div>

        <div className="question-content">
          <h3>{currentQ.question}</h3>
          
          {currentQ.type === 'stroop' && (
            <div className="stroop-test">
              {currentQ.items.map((item, index) => (
                <div key={index} className="stroop-item" style={{ color: item.color }}>
                  {item.text}
                </div>
              ))}
              <input
                type="text"
                placeholder="Renkleri virgÃ¼lle ayÄ±rarak yazÄ±n..."
                value={userAnswers[currentQuestion] || ''}
                onChange={(e) => handleAnswer(e.target.value)}
                className="answer-input"
              />
            </div>
          )}

          {currentQ.type === 'sequence' && (
            <div className="sequence-test">
              <div className="sequence-display">{currentQ.sequence}</div>
              <input
                type="text"
                placeholder="Ters sÄ±rayla yazÄ±n..."
                value={userAnswers[currentQuestion] || ''}
                onChange={(e) => handleAnswer(e.target.value)}
                className="answer-input"
              />
            </div>
          )}

          {currentQ.type === 'pattern' && (
            <div className="pattern-test">
              <div className="pattern-display">{currentQ.pattern}</div>
              <input
                type="number"
                placeholder="SayÄ±yÄ± girin..."
                value={userAnswers[currentQuestion] || ''}
                onChange={(e) => handleAnswer(parseInt(e.target.value))}
                className="answer-input"
              />
            </div>
          )}

          {currentQ.type === 'counting' && (
            <div className="counting-test">
              <div className="text-display">{currentQ.text}</div>
              <input
                type="number"
                placeholder="A harfi sayÄ±sÄ±nÄ± girin..."
                value={userAnswers[currentQuestion] || ''}
                onChange={(e) => handleAnswer(parseInt(e.target.value))}
                className="answer-input"
              />
            </div>
          )}

          {currentQ.type === 'visual' && (
            <div className="visual-test">
              <div className="shapes-display">
                {currentQ.shapes.map((shape, index) => (
                  <button
                    key={index}
                    className={`shape-btn ${userAnswers[currentQuestion] === index ? 'selected' : ''}`}
                    onClick={() => handleAnswer(index)}
                  >
                    {shape}
                  </button>
                ))}
              </div>
            </div>
          )}

          {currentQ.type === 'math' && (
            <div className="math-test">
              <div className="math-display">{currentQ.operations}</div>
              <input
                type="number"
                placeholder="Sonucu girin..."
                value={userAnswers[currentQuestion] || ''}
                onChange={(e) => handleAnswer(parseInt(e.target.value))}
                className="answer-input"
              />
            </div>
          )}

          {currentQ.type === 'memory' && (
            <div className="memory-test">
              <div className="words-display">
                {currentQ.words.map((word, index) => (
                  <span key={index} className="word-item">{word}</span>
                ))}
              </div>
              <textarea
                placeholder="HatÄ±rladÄ±ÄŸÄ±nÄ±z kelimeleri yazÄ±n..."
                value={userAnswers[currentQuestion] || ''}
                onChange={(e) => handleAnswer(e.target.value)}
                rows={3}
                className="answer-textarea"
              />
            </div>
          )}

          {currentQ.type === 'focus' && (
            <div className="focus-test">
              <div className="sentence-display">{currentQ.sentence}</div>
              <input
                type="number"
                placeholder="E harfi sayÄ±sÄ±nÄ± girin..."
                value={userAnswers[currentQuestion] || ''}
                onChange={(e) => handleAnswer(parseInt(e.target.value))}
                className="answer-input"
              />
            </div>
          )}

          {currentQ.type === 'speed' && (
            <div className="speed-test">
              <div className="numbers-display">
                {currentQ.numbers.join(' + ')}
              </div>
              <input
                type="number"
                placeholder="ToplamÄ± girin..."
                value={userAnswers[currentQuestion] || ''}
                onChange={(e) => handleAnswer(parseInt(e.target.value))}
                className="answer-input"
              />
            </div>
          )}

          {currentQ.type === 'logic' && (
            <div className="logic-test">
              <div className="sequence-display">{currentQ.sequence}</div>
              <input
                type="number"
                placeholder="Eksik sayÄ±yÄ± girin..."
                value={userAnswers[currentQuestion] || ''}
                onChange={(e) => handleAnswer(parseInt(e.target.value))}
                className="answer-input"
              />
            </div>
          )}

          {currentQ.type === 'detail' && (
            <div className="detail-test">
              <div className="image-display">{currentQ.image}</div>
              <input
                type="number"
                placeholder="Daire sayÄ±sÄ±nÄ± girin..."
                value={userAnswers[currentQuestion] || ''}
                onChange={(e) => handleAnswer(parseInt(e.target.value))}
                className="answer-input"
              />
            </div>
          )}

          {currentQ.type === 'concentration' && (
            <div className="concentration-test">
              {currentQ.options.map((option, index) => (
                <button
                  key={index}
                  className={`option-btn ${userAnswers[currentQuestion] === index ? 'selected' : ''}`}
                  onClick={() => handleAnswer(index)}
                >
                  {option}
                </button>
              ))}
            </div>
          )}
        </div>

        <div className="navigation">
          <button 
            className="nav-btn"
            onClick={nextQuestion}
            disabled={userAnswers[currentQuestion] === undefined}
          >
            {currentQuestion === questions.length - 1 ? 'Testi Bitir' : 'Sonraki Soru'}
          </button>
        </div>
      </div>
    );
  };

  const renderResults = () => (
    <div className="test-results">
      <h2>Dikkat ve Konsantrasyon Testi SonuÃ§larÄ±</h2>
      
      <div className="score-summary">
        <div className="score-item">
          <span className="score-label">Toplam Skor:</span>
          <span className="score-value">{score} / {questions.length}</span>
        </div>
        <div className="score-item">
          <span className="score-label">YÃ¼zde:</span>
          <span className="score-value">%{getScorePercentage()}</span>
        </div>
        <div className="score-item">
          <span className="score-label">Performans:</span>
          <span className="score-value">{getScoreLevel()}</span>
        </div>
      </div>

      <div className="results-actions">
        <button 
          className="action-btn primary"
          onClick={() => navigate('/tests')}
        >
          Test Listesine DÃ¶n
        </button>
        <button 
          className="action-btn secondary"
          onClick={() => window.location.reload()}
        >
          Testi Tekrarla
        </button>
      </div>
    </div>
  );

  return (
    <div className="attention-test-container">
      <div style={{ 
        position: 'absolute', 
        top: '20px', 
        right: '20px',
        display: 'flex',
        gap: '10px',
        alignItems: 'center'
      }}>
        <ThemeSwitch />
        <button 
          onClick={handleLogout}
          style={{
            background: '#dc2626',
            color: '#fff',
            border: 'none',
            borderRadius: '8px',
            padding: '8px 16px',
            fontSize: '0.9rem',
            cursor: 'pointer',
            transition: 'background 0.2s'
          }}
          onMouseOver={(e) => e.target.style.background = '#b91c1c'}
          onMouseOut={(e) => e.target.style.background = '#dc2626'}
        >
          ðŸšª Ã‡Ä±kÄ±ÅŸ Yap
        </button>
      </div>

      {currentPhase === 'instructions' && renderInstructions()}
      {currentPhase === 'test' && renderQuestion()}
      {currentPhase === 'results' && renderResults()}
      
      {toast && (
        <Toast
          message={toast.message}
          type={toast.type}
          onClose={() => setToast(null)}
        />
      )}
    </div>
  );
} 